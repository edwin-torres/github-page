{"version":3,"sources":["Nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","style","color","to","Home","marginTop","App","exact","from","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQA2BeA,MArBf,WAME,OACE,6BACI,oCAEI,wBAAIC,UAAY,aAChB,kBAAC,IAAD,CAAMC,MAVO,CACLC,MAAO,SASUC,GAAK,KACd,wC,WCW5B,IAAMC,EAAO,kBACX,6BACE,yBAAKH,MAAS,CAACI,UAAU,SAEzB,wDAA6B,uCAA7B,uBACA,uEAQWC,EArCf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKN,UAAY,OACP,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACA,kBAAC,IAAD,CACAO,OAAK,EACLC,KAAK,eACLL,GAAG,MAEG,kBAAC,IAAD,CAAOM,KAAO,IAAIF,OAAK,EAACG,UAAaN,QCLrCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cba52a6.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nimport './App.css';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n        const navStyle = {\r\n                    color: 'white'\r\n        };\r\n\r\n\r\n  return (\r\n    <nav>\r\n        <h3>LOGO</h3>\r\n     \r\n            <ul className = \"nav-links\">\r\n            <Link style = {navStyle} to = \"/\">\r\n                            <li >Home</li>\r\n                    </Link>\r\n  \r\n            </ul>\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n\r\n\r\nexport function ProjectNav() {\r\n        const navStyle = {\r\n                    color: 'white'\r\n        };\r\n\r\n\r\n  return (\r\n    <nav className = \"projects-nav\">\r\n        <h3>ProjectNav</h3>\r\n     \r\n            <ul className = \"nav-links\">\r\n            <Link style = {navStyle} to = \"/\">\r\n                            <li >Home</li>\r\n                    </Link>\r\n\r\n                    <Link style = {navStyle} to = \"/projects/shop\">\r\n                            <li >Shop</li>\r\n                    </Link>\r\n                    <Link style = {navStyle} to = \"/pokemon\">\r\n                            <li >Pokemon</li>\r\n                    </Link>\r\n                    <Link style = {navStyle} to = \"/projects/breakout\">\r\n                            <li >breakout</li>\r\n                    </Link>\r\n                    <Link style = {navStyle} to = \"/projects\">\r\n                            <li >Projects</li>\r\n                    </Link>\r\n            \r\n            </ul>\r\n\r\n    </nav>\r\n  );\r\n}","import React from 'react';\nimport Nav from './Nav';\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router >\n    <div className = \"App\">\n              <Nav />\n      \n              <Switch>\n              <Redirect\n              exact\n              from=\"/github-page\"\n              to=\"/\"            \n            />\n                    <Route path = \"/\" exact component = {Home} />\n                  \n                  \n                   \n              </Switch>\n    </div>\n</Router>\n  );\n}\n\n\n\nconst Home = () => (\n  <div>\n    <div style = {{marginTop:\"1.5%\"}}>\n   \n    <p>My names is Edwin.  I'm a <em>Dreamer</em> learning to code. </p>\n    <p>I also teach math at Laredo College. </p>\n\n    </div>\n  \n    </div>\n\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}